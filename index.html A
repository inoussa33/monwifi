<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Connexion Cyber Campus</title>
    <style>
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
}

body {
    background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    color: #fff;
    overflow-x: hidden;
}



button {
    background-color: #fdbb2d;
    color: #1a2a6c;
    border: none;
    padding: 10px;
    border-radius: 25px;
    cursor: pointer;
    transition: all 0.3s;
    font-weight: bold;
}

button:hover {
    background-color: #1a2a6c;
    color: #fdbb2d;
}

table {
    width: 100%;
    border-collapse: collapse;
    color: white;
}

th, td {
    padding: 8px;
    text-align: left;
    border-bottom: 1px solid rgba(255, 255, 255, 0.2);
}

ul {
    list-style-type: none;
}

li {
    margin-bottom: 5px;
    position: relative;
    padding-left: 20px;
}

li::before {
    content: '➤';
    position: absolute;
    left: 0;
    color: #fdbb2d;
}

.animated-text-container {
    overflow: hidden;
    height: 50px;
}

.animated-text {
    animation: scrollText 10s linear infinite;
}

@keyframes scrollText {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-50px); }
}

footer {
    margin-top: auto;
    text-align: center;
    padding: 20px;
    background-color: rgba(0, 0, 0, 0.5);
}

@keyframes slide1 {
    0% { transform: translateX(0); }
    50% { transform: translateX(-100%); }
    100% { transform: translateX(0); }
}

@keyframes slide2 {
    0% { transform: translateX(100%); }
    50% { transform: translateX(0); }
    100% { transform: translateX(100%); }
}

@media (max-width: 768px) {
    .rates-section, .locations-section, .products-section {
        flex-basis: 100%;
    }
}

.notification {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: rgba(255, 255, 255, 0.9);
    border-radius: 10px;
    padding: 30px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
    z-index: 1000;
    display: none;
    color: #1a2a6c;
    text-align: center;
}

.notification h2 {
    color: #1a2a6c;
    margin-bottom: 20px;
}

.notification p {
    margin-bottom: 15px;
}

.close-icon {
    position: absolute;
    top: 10px;
    right: 10px;
    cursor: pointer;
    font-size: 20px;
}

#ticket-select {
    margin-bottom: 20px;
}

#nomTicket {
    width: 100%;
    padding: 10px;
    border-radius: 5px;
    border: 1px solid #ccc;
}

#paymentFrame {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    z-index: 1000;
}

#paymentFrame > div {
    position: relative;
    width: 80%;
    height: 80%;
    margin: 5% auto;
    background-color: white;
    border-radius: 10px;
    overflow: hidden;
}

#closePaymentFrame {
    position: absolute;
    top: 10px;
    right: 10px;
    z-index: 1001;
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #1a2a6c;
}

#paymentIframe {
    width: 100%;
    height: 100%;
    border: none;
}

.delete-button {
    background-color: #f44336; /* Rouge pour un bouton de suppression */
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 25px;
    cursor: pointer;
    transition: all 0.3s;
    font-weight: bold;
    margin: 10px;
}

.delete-button:hover {
    background-color: #d32f2f; /* Rouge foncé au survol */
}

.notification.error { /* Style spécifique pour les notifications d'erreur */
    background-color: #fdd; /* Couleur de fond légèrement rouge */
    border: 1px solid #faa; /* Bordure rouge */
    color: #f00; /* Texte en rouge */
}

.notification .ticket-info {
    /* Style pour la section d'information du ticket */
    margin-bottom: 15px;
    text-align: left; /* Alignement à gauche pour une meilleure lisibilité */
}

.notification .ticket-info p {
    margin-bottom: 5px; /* Espacement entre les lignes */
}

.notification .login-button,
.notification .delete-button {
    display: inline-block; /* Affichage en ligne pour les boutons */
    margin: 0 10px; /* Espacement entre les boutons */
}

.notification .login-button {
    background-color: #fdbb2d; /* Style pour le bouton Connexion */
    color: #1a2a6c;
    border: none;
    padding: 10px 20px;
    border-radius: 25px;
    cursor: pointer;
    transition: all 0.3s;
    font-weight: bold;
}

.notification .login-button:hover {
    background-color: #1a2a6c;
    color: #fdbb2d;
}
.login-section {
            display: none; /* Masquer la section de connexion */
        }
    </style>

    $(if chap-id)
    <form name="sendin" action="$(link-login-only)" method="post" style="display:none">
        <input type="hidden" name="username" />
        <input type="hidden" name="password" />
        <input type="hidden" name="dst" value="$(link-orig)" />
        <input type="hidden" name="popup" value="true" />
    </form>
    <script src="/md5.js"></script>
    <script>
        function doLogin() {
            document.sendin.username.value = document.login.username.value;
            document.sendin.password.value = hexMD5('$(chap-id)' + document.login.password.value + '$(chap-challenge)');
            document.sendin.submit();
            return false;
        }
        document.addEventListener('DOMContentLoaded', () => {
    showNotification("Erreur de chargement!", "Oups! cette page ne s'est pas bien chargée. Rafraichissez-le ! Vous pouvez aussi continuer dans autre navigateur avec ce lien: http://dls.wifi/");
    syncTickets().then(() => {
        hideNotification();
    });
    setInterval(syncTickets, 5000); 
});
    </script>
    $(endif)
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
        import { getDatabase, ref, get, update, remove, set, push } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-database.js";

        const firebaseConfig = {
            apiKey: "AIzaSyB6AUBnK_7Vy2ABWI2JMo3ebG_Sljr8XlY",
            authDomain: "cyber-campus-2706f.firebaseapp.com",
            databaseURL: "https://cyber-campus-2706f-default-rtdb.firebaseio.com",
            projectId: "cyber-campus-2706f",
            storageBucket: "cyber-campus-2706f.appspot.com",
            messagingSenderId: "719410601264",
            appId: "1:719410601264:web:44fd2e3757721866303cf5",
            measurementId: "G-CEEFJP5LYZ"
        };
        const app = initializeApp(firebaseConfig);
        const db = getDatabase(app);
        let localTickets = {}; 
                // Fonction pour synchroniser les données
                async function syncTickets() {
            try {
                const ticketsTotalRef = ref(db, 'TicketsTotal');
                const snapshot = await get(ticketsTotalRef);
                localTickets = snapshot.val() || {}; // Récupérer les tickets depuis Firebase

                const ticketsVendusRef = ref(db, 'TicketsVendus');
                const snapshotVendus = await get(ticketsVendusRef);
                const ticketsVendus = snapshotVendus.val() || {};

                // Supprimer les tickets vendus de localTickets
                for (const ticketId in ticketsVendus) {
                    const ticketVendu = ticketsVendus[ticketId];
                    const ticketName = Object.keys(localTickets).find(
                        (key) => localTickets[key].utilisateur.includes(ticketVendu.user) 
                    );

                    if (ticketName) {
                        const ticketIndex = localTickets[ticketName].utilisateur.indexOf(ticketVendu.user);

                        if (ticketIndex > -1) {
                            localTickets[ticketName].utilisateur.splice(ticketIndex, 1);
                            localTickets[ticketName].motDePasse.splice(ticketIndex, 1);
                            localTickets[ticketName].prix.splice(ticketIndex, 1);

                            if (localTickets[ticketName].utilisateur.length === 0) {
                                delete localTickets[ticketName];
                            }
                        }
                    }
                }

                console.log("Données synchronisées:", localTickets);
            } catch (error) {
                console.error("Erreur lors de la synchronisation des tickets:", error);
            }
        }
        function storeTicketLocally(ticketData) {
            localStorage.setItem('storedTicket', JSON.stringify(ticketData));
        }
        function updateButtonText() {
            const payButton = document.querySelector('.nav-button.animate-pay');
            const storedTicket = localStorage.getItem('storedTicket');
            if (storedTicket) {
                payButton.textContent = 'Voir mon ticket';
            } else {
                payButton.textContent = 'Payer un ticket';
            }
        }
                function showTariffsTable() {
            const tariffsTable = document.querySelector('.rates-section table');
            const loadingMessage = document.querySelector('.rates-section .loading-message');
            tariffsTable.style.display = 'table';
            loadingMessage.style.display = 'none';
        }
        document.addEventListener('DOMContentLoaded', () => {
            syncTickets();
            setInterval(syncTickets, 5000);
            showTariffsTable();
        });
        function openPaymentFrame(paymentLink, ticketData) {
    const frame = document.getElementById('paymentFrame');
    const iframe = document.getElementById('paymentIframe');
    iframe.src = paymentLink;
    frame.style.display = 'block';

    // Display the loading icon
    const loadingIcon = document.querySelector('#paymentFrame .loading-icon');
    loadingIcon.style.display = 'block';

    // Hide the loading icon once the iframe is loaded and send ticket data
    iframe.onload = () => {
        loadingIcon.style.display = 'none';
        // Envoyer les données du ticket à l'iframe
        iframe.contentWindow.postMessage({ type: 'ticketData', data: ticketData }, '*');
    };

    window.addEventListener('message', handlePaymentMessage);
    const urlCheckInterval = setInterval(monitorIframeUrl, 500);
    frame.dataset.urlCheckInterval = urlCheckInterval;
}
        function closePaymentFrame() {
            const frame = document.getElementById('paymentFrame');
            const iframe = document.getElementById('paymentIframe');
            iframe.src = '';
            frame.style.display = 'none';
            window.removeEventListener('message', handlePaymentMessage);
            clearInterval(parseInt(frame.dataset.urlCheckInterval));
        }
        function handlePaymentMessage(event) {
            if (event.origin !== "https://live.fedapay.com/") return;

            if (event.data.status === "success" || event.data.url === "http://dls.wifi/") {
                closePaymentFrame();
                handleSuccessfulPayment(event.data.ticketName);
            }
        }
        function monitorIframeUrl() {
            const iframe = document.getElementById('paymentIframe');
            try {
                const iframeUrl = iframe.contentWindow.location.href;
                if (iframeUrl.toLowerCase().includes('dls')) {
                    closePaymentFrame();
                    const lastTicketName = localStorage.getItem('lastTicketName');
                    if (lastTicketName) {
                        handleSuccessfulPayment(lastTicketName);
                    } else {
                        console.warn("Aucune information de ticket trouvée. Le paiement semble réussi mais les détails sont manquants.");
                        showNotification("Paiement réussi", "Votre paiement semble avoir été traité avec succès. Si vous ne voyez pas votre ticket, veuillez contacter le support.");
                    }
                }
            } catch (e) {
                console.error("Erreur de sécurité lors de la surveillance de l'URL de l'iframe : ", e);
            }
        }
        async function buyTicket(ticketName) {
    if (!ticketName) {
        showNotification("Echec de chargement", "Oups! cette page ne s'est pas bien chargée. Rafraichissez-le ! Vous pouvez aussi continuer dans autre navigateur avec ce lien: http://cyberducampus.net/");
        return;
    }
    
    try {
        // Vérifier si le ticket existe dans localTickets
        if (localTickets[ticketName]) {
            const ticketData = localTickets[ticketName];
            const ticketDisponible = ticketData.utilisateur.length > 0;
            
            if (ticketDisponible) {
                // Trouver l'index du premier ticket disponible
                const index = 0;

                // 1. Stocker le ticket dans "Achat en cours"
                const achatEnCoursRef = ref(db, 'AchatEnCours');
                const newTicketRef = push(achatEnCoursRef);
                await set(newTicketRef, {
                    user: ticketData.utilisateur[index],
                    password: ticketData.motDePasse[index],
                    price: ticketData.prix[index]
                });

                // Stocker le nom du ticket et l'index dans localStorage
                localStorage.setItem('lastTicketName', ticketName);
                localStorage.setItem('ticketIndex', index);

                const paymentLink = ticketData.lienPaiement; 

                // Ouvrir l'iframe de paiement et passer les données du ticket
                openPaymentFrame(paymentLink, {
                    ticketName: ticketName, // Assurez-vous que ticketName est inclus
                    user: ticketData.utilisateur[index],
                    password: ticketData.motDePasse[index],
                    price: ticketData.prix[index]
                }); 
            } else {
                showNotification("Erreur", "Tous les tickets de cette catégorie sont vendus.");
            }
        } else {
            showNotification("Erreur", "Ticket non trouvé");
        }
    } catch (error) {
        console.error("Erreur lors de la récupération du ticket : ", error);
        showNotification("Erreur", "Une erreur s'est produite lors de la récupération du ticket.");
        logTransactionError(); 
    }
}
   
        window.buyTicket = buyTicket;
        window.closePaymentFrame = closePaymentFrame;
        async function handleSuccessfulPayment(ticketName) {
            try {
                if (localTickets[ticketName]) {
                    const ticketData = localTickets[ticketName];
                    const index = parseInt(localStorage.getItem('ticketIndex'));
        
                    if (index !== undefined && index >= 0 && index < ticketData.utilisateur.length) {
                        storeTicketLocally({
                            ticketName: ticketName,
                            user: ticketData.utilisateur[index],
                            password: ticketData.motDePasse[index],
                            price: ticketData.prix[index]
                        });
                      const ticketsVendusRef = ref(db, 'TicketsVendus');
                      const newTicketRef = push(ticketsVendusRef);
                      await set(newTicketRef, {
                          user: ticketData.utilisateur[index],
                          password: ticketData.motDePasse[index],
                          price: ticketData.prix[index]
                      });        
                        showNotification("Ticket acheté",
                            `Nom d'utilisateur: ${ticketData.utilisateur[index]}\n` +
                            `Mot de passe: ${ticketData.motDePasse[index]}\n` +
                            `Prix: ${ticketData.prix[index]} F`,
                            true 
                        );
                        ticketData.utilisateur.splice(index, 1);
                        ticketData.motDePasse.splice(index, 1);
                        ticketData.prix.splice(index, 1);
                        if (ticketData.utilisateur.length === 0) {
                            delete localTickets[ticketName];
                        }
                        localStorage.removeItem('lastTicketName');
                        localStorage.removeItem('ticketIndex');
                    } else {
                        showNotification("Erreur", "Impossible de récupérer les informations du ticket.");
                    }
                } else {
                    showNotification("Erreur", "Ticket non trouvé");
                }
            } catch (error) {
                console.error("Erreur lors du traitement du paiement réussi :", error);
                showNotification("Erreur", "Une erreur s'est produite lors du traitement de votre achat.");
                logTransactionError(); 
            }
        }
        function showNotification(title, message, isTicketPurchase = false, isError = false) {
            const notification = document.getElementById('notification');
            const notificationTitle = document.getElementById('notification-title');
            const notificationMessage = document.getElementById('notification-message');
            const payButton = document.querySelector('.notification button');
            const existingLoginButton = notification.querySelector('.login-button');
            if (existingLoginButton) {
                existingLoginButton.remove();
            }
            const existingDeleteButton = notification.querySelector('.delete-button');
            if (existingDeleteButton) {
                existingDeleteButton.remove();
            }
            notificationTitle.textContent = title;
            notificationMessage.textContent = message;
            const storedTicket = JSON.parse(localStorage.getItem('storedTicket'));
            if (storedTicket) {
                notificationTitle.textContent = 'Votre ticket';
                notificationMessage.textContent = `
                    Nom d'utilisateur: ${storedTicket.user}
                    Mot de passe: ${storedTicket.password}
                    Prix: ${storedTicket.price} F
                `;
                payButton.style.display = 'none';
                const loginButton = document.createElement('button');
                loginButton.className = 'login-button';
                loginButton.textContent = 'Connexion';
                loginButton.addEventListener('click', () => {
                    autoLogin(storedTicket.user, storedTicket.password);
                });
                notification.appendChild(loginButton);
                const deleteButton = document.createElement('button');
                deleteButton.className = 'delete-button';
                deleteButton.textContent = 'Supprimer';
                deleteButton.addEventListener('click', () => {
                    deleteTicket();
                });
                notification.appendChild(deleteButton);
            } else if (isTicketPurchase) {
                payButton.style.display = 'none'; 
                const loginButton = document.createElement('button');
                loginButton.className = 'login-button';
                loginButton.textContent = 'Connexion';
                loginButton.addEventListener('click', () => {
                    const lines = message.split('\n');
                    const username = lines[0].split(': ')[1];
                    const password = lines[1].split(': ')[1];
                    autoLogin(username, password);
                });
                notification.appendChild(loginButton);
            } else {
                payButton.style.display = 'none';
                const existingLoginButton = notification.querySelector('.login-button');
                if (existingLoginButton) {
                    existingLoginButton.remove();
                }
                const existingDeleteButton = notification.querySelector('.delete-button');
                if (existingDeleteButton) {
                    existingDeleteButton.remove();
                }
            }
            if (isError) {
                notification.classList.add('error');
            } else {
                notification.classList.remove('error');
            }
            const closeIcon = document.querySelector('.close-icon');
            closeIcon.addEventListener('click', hideNotification);
            notification.style.display = 'block';
        }
      const usernameInput = document.querySelector('input[name="username"]');
usernameInput.addEventListener('input', function() {
  let username = this.value;
  username = username.replace(/(\s*$)/g, ""); 
  this.value = username;
});
function autoLogin() {
  const storedTicket = JSON.parse(localStorage.getItem('storedTicket'));
  if (storedTicket) {
      document.login.username.value = storedTicket.user;
      document.login.password.value = storedTicket.password;
      document.login.submit();
      console.log("Connexion automatique effectuée avec succès.");
  } else {
      console.log("Aucune information de connexion trouvée pour la connexion automatique.");
  }
}
const autoLoginEvent = new Event('autoLoginAttempt');
document.dispatchEvent(autoLoginEvent); 
document.addEventListener('autoLoginAttempt', function() {
  autoLogin();
});     
              function logTransactionError() {
                  const timestamp = new Date().toISOString();
                  const errorRef = collection(db, 'TransactionErrors');
                  addDoc(errorRef, { timestamp });
                  console.log(`Erreur de transaction enregistrée à ${timestamp}`);
              }
function handleLogin(event) {
  event.preventDefault();
  var form = document.forms['login'];
  var username = form.username.value;
  var password = form.password.value;
  localStorage.removeItem('storedTicket');
  const storedTicket = JSON.parse(localStorage.getItem('storedTicket'));
  if (!storedTicket || !storedTicket.purchaseDate) { 
      const ticketData = {
          user: username,
          password: password,
          purchaseDate: new Date().toISOString()
      };
      localStorage.setItem('storedTicket', JSON.stringify(ticketData));
      console.log("Nouvelles informations de connexion stockées :", ticketData);
  } else {
      console.log("Un ticket acheté est déjà stocké. Pas besoin de modifier les informations.");
  }
  document.dispatchEvent(autoLoginEvent); 
}
document.forms['login'].addEventListener('submit', handleLogin);
        function hideNotification() {
            document.getElementById('notification').style.display = 'none';
        }
        function deleteTicket() {
            localStorage.removeItem('storedTicket');
            showNotification("Ticket supprimé", "Votre ticket a été supprimé avec succès.");
            const deleteButton = document.querySelector('.delete-button');
            if (deleteButton) {
                deleteButton.remove();
            }
            const loginButton = document.querySelector('.login-button');
            if (loginButton) {
                loginButton.style.display = 'block';
            }
            updateButtonText();
        }
        window.addEventListener('load', () => {
            updateButtonText();
        });
        const payButton = document.querySelector('.nav-button.animate-pay');
        payButton.addEventListener('click', () => {
            const storedTicket = localStorage.getItem('storedTicket');
            if (storedTicket) {
                showNotification('Votre ticket', 'Nom d\'utilisateur : ' + JSON.parse(storedTicket).user + '\nMot de passe : ' + JSON.parse(storedTicket).password + '\nPrix : ' + JSON.parse(storedTicket).price + ' F');
            } else {
                document.querySelector('.rates-section').scrollIntoView({ behavior: 'smooth' });
            }
        });
    </script>
</head>
<body>
    <main class="container">
        <section class="login-section">
            <h2>Connexion</h2>
            <form name="login" action="$(link-login-only)" method="post" $(if chap-id) onSubmit="return doLogin()" $(endif)>
                <input type="hidden" name="dst" value="$(link-orig)" />
                <input type="hidden" name="popup" value="true" />
                <input type="text" name="username" placeholder="Nom d'utilisateur" value="$(username)" required>
                <input type="password" name="password" placeholder="Mot de passe" required>
                <button type="submit">Se connecter</button>
            </form>
            <p class="info $(if error)alert$(endif)">
                $(if error == "")Veuillez vous connecter pour utiliser le service hotspot Internet $(if trial == 'yes')<br />Essai gratuit disponible, <a href="$(link-login-only)?dst=$(link-orig-esc)&username=T-$(mac-esc)">cliquez ici</a>.$(endif)
                $(endif)
                $(if error)$(error)$(endif)
            </p>
        </section>
        <section class="rates-section">
           
            <table>
                <tr>
                    <th>Forfait</th>
                    <th>Prix</th>
                    <th>Payer</th>
                </tr>
                <tr>
                    <td>1 Heure</td>
                    <td onclick="buyTicket('1 Heure')">100 F</td>
                    <td><button onclick="buyTicket('1 Heure')">Payer</button></td>
                </tr>
                <tr>
                    <td>2 Heures</td>
                    <td onclick="buyTicket('2 Heures')">200 F</td>
                    <td><button onclick="buyTicket('2 Heures')">Payer</button></td>
                </tr>
                <tr>
                    <td>3 Heure</td>
                    <td onclick="buyTicket('3 Heures')">250 F</td>
                    <td><button onclick="buyTicket('3 Heures')">Payer</button></td>
                </tr>
                <tr>
                    <td>1 Heure Pro</td>
                    <td onclick="buyTicket('1 Heure Pro')">250 F</td>
                    <td><button onclick="buyTicket('1 Heure Pro')">Payer</button></td>
                </tr>
                <tr>
                    <td>2 Heures Pro</td>
                    <td onclick="buyTicket('2 Heures Pro')">450 F</td>
                    <td><button onclick="buyTicket('2 Heures Pro')">Payer</button></td>
                </tr>
                <tr>
                    <td>3 Heure Pro</td>
                    <td onclick="buyTicket('3 Heures Pro')">600 F</td>
                    <td><button onclick="buyTicket('3 Heures Pro')">Payer</button></td>
                </tr>
                <tr>
                    <td>1 Go</td>
                    <td onclick="buyTicket('1 Go')">100 F</td>
                    <td><button onclick="buyTicket('1 Go')">Payer</button></td>
                </tr>
                <tr>
                    <td>5 Go</td>
                    <td onclick="buyTicket('5 Go')">400 F</td>
                    <td><button onclick="buyTicket('5 Go')">Payer</button></td>
                </tr>
                <tr>
                    <td>10 Go</td>
                    <td onclick="buyTicket('10 Go')">700 F</td>
                    <td><button onclick="buyTicket('10 Go')">Payer</button></td>
                </tr>
                <tr>
                    <td>25 Go</td>
                    <td onclick="buyTicket('25 Go')">1500 F</td>
                    <td><button onclick="buyTicket('25 Go')">Payer</button></td>
                </tr>
                <tr>
                    <td>1 Jour (illimité)</td>
                    <td onclick="buyTicket('1 Jour (illimité)')">300 F</td>
                    <td><button onclick="buyTicket('1 Jour (illimité)')">Payer</button></td>
                </tr>
                <tr>
                    <td>3 Jours (illimité)</td>
                    <td onclick="buyTicket('3 Jours (illimité)')">600 F</td>
                    <td><button onclick="buyTicket('3 Jours (illimité)')">Payer</button></td>
                </tr>
                <tr>
                    <td>7 Jours (illimité)</td>
                    <td onclick="buyTicket('7 Jours (illimité)')">1200 F</td>
                    <td><button onclick="buyTicket('7 Jours (illimité)')">Payer</button></td>
                </tr>
                <tr>
                    <td>30 Jours (illimité)</td>
                    <td onclick="buyTicket('30 Jours (illimité)')">4000 F</td>
                    <td><button onclick="buyTicket('30 Jours (illimité)')">Payer</button></td>
                </tr>
                <tr>
                    <td>1 Jour Pro (illimité)</td>
                    <td onclick="buyTicket('1 Jour Pro (illimité)')">600 F</td>
                    <td><button onclick="buyTicket('1 Jour Pro (illimité)')">Payer</button></td>
                </tr>
                <tr>
                    <td>3 Jours Pro (illimité)</td>
                    <td onclick="buyTicket('3 Jours Pro (illimité)')">1200 F</td>
                    <td><button onclick="buyTicket('3 Jours Pro (illimité)')">Payer</button></td>
                </tr>
                <tr>
                    <td>7 Jours Pro (illimité)</td>
                    <td onclick="buyTicket('7 Jours Pro (illimité)')">2400 F</td>
                    <td><button onclick="buyTicket('7 Jours Pro (illimité)')">Payer</button></td>
                </tr>
                <tr>
                    <td>30 Jours Pro (illimité)</td>
                    <td onclick="buyTicket('30 Jours Pro (illimité)')">8000 F</td>
                    <td><button onclick="buyTicket('30 Jours Pro (illimité)')">Payer</button></td>
                </tr>
            </table>
        </section>

    <div class="notification" id="notification">
        <span class="close-icon" onclick="hideNotification()">×</span>
        <h2 id="notification-title">Erreur de chargement!</h2>
        <p id="notification-message">Cette page ne s'est pas bien chargée. Rafraichissez-le ! Vous pouvez aussi continuer dans autre navigateur avec ce lien: http://cyberducampus.net/</p>
        <button style="display: none;" onclick="buyTicket(document.getElementById('nomTicket').value)">Payer</button>
    </div>

    <div id="paymentFrame">
        <div>
            <button id="closePaymentFrame" onclick="closePaymentFrame()">×</button>
            <iframe id="paymentIframe"></iframe>
        </div>
    </div>

</body>
</html>
